name: reusable workflow

on:
  workflow_call:
    inputs:
      action:
        required: true
        type: string
      stage:
        required: true
        type: string
      resource:  
        required: false
        type: string
      java-version:
        required: false
        type: string
        default: '11'
      # allowing calling workflows to pass in maven parameter(s) such as '-Dmaven.test.skip' for certain apps, default to blank, not to skip test
      maven-params:
        required: false
        type: string
        default: ''  
    #secrets:
    #  AWS_ACCESS_KEY_ID:
    #    required: true
    #  AWS_SECRET_ACCESS_KEY:
    #    required: true

jobs:
  set-vars: 
    name: Configuration 
    if: contains(inputs.resource , 'lambda1')
    runs-on: ubuntu-latest
    steps:
     - name: Set values
      run: echo "IS_LAYER=true" >> $GITHUB_ENV
      
  
  build-project:
    name: Build ${{ inputs.stage }} the lambda function ${{ inputs.resource }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.resource }}  
    steps:
     - uses: actions/checkout@v2
     - name: Checkout folder source code from ${{ github.ref_name }} for the event ${{ github.event_name }}
       run: |
         echo "Checkout folder ${{ inputs.resource }}"
     - name: Setup jdk
       uses: actions/setup-java@de1bb2b0c5634f0fc4438d7aa9944e68f9bf86cc
       with:
         java-version: ${{ inputs.java-version }}
         distribution: 'adopt'
         cache: maven

     - name: Build with Maven
       run: mvn clean install ${{ inputs.maven-params }} --file pom.xml     
  
  build-image-layer:
    name: Deploy layer ${{ inputs.stage }} the lambda function ${{ inputs.resource }}
    needs: build-project
    if: ${{ env.IS_LAYER == 'true' }} && ${{ github.ref_name == 'develop' }} 
    runs-on: ubuntu-latest
    steps:
     - run: echo Build image layer 
     - name: Set project version as environment variable
       run: echo "PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
     
     - name: Print debug info
       run: |
          echo working_directory is ${{ inputs.resource }}
          echo project version is ${{ env.PROJECT_VERSION }}


  build-image:
    name: Deploy ${{ inputs.stage }} the lambda function ${{ inputs.resource }}
    needs: build-project
    if: ${{ github.ref_name == 'develop' }} 
    runs-on: ubuntu-latest
    steps:
     - run: echo Build image
     - name: Set project version as environment variable
       run: echo "PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
     
     - name: Print debug info
       run: |
          echo working_directory is ${{ inputs.resource }}
          echo project version is ${{ env.PROJECT_VERSION }}
        
